{"version":3,"sources":["components/ChartElement.js","components/ExpenseForm.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["ChartElement","props","amount","data","labels","title","datasets","label","backgroundColor","options","display","text","ExpenseForm","useState","id","lists","setList","total","setTotal","chartTitle","setChartTitle","chartAmount","setChartAmount","inputRef","React","createRef","useEffect","current","focus","onSubmit","e","preventDefault","target","elements","Title","value","trim","Amount","slice","reset","length","Number","document","querySelector","classList","remove","className","type","name","ref","placeholder","style","textTransform","required","thousandSeparator","thousandsGroupStyle","prefix","map","list","index","listStyleType","key","a","Calculator","speed","typingDelay","eraseDelay","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cca10e98.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nfunction ChartElement(props) {\r\n  const amount = props.amount;\r\n  const title = props.title;\r\nconst data = {\r\n    labels: title,\r\n    datasets:[\r\n        {\r\n            label : 'Expense',\r\n            data: amount,\r\n            backgroundColor: [ '#FFFF99', '#00B3E6', \r\n            '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n            '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \r\n            '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n            '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \r\n            '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n            '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \r\n            '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n            '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \r\n            '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF']\r\n        }\r\n    ]\r\n  };\r\n  const options ={\r\n      title:{\r\n          display :true,\r\n          text: 'Expense'\r\n      }\r\n  }\r\n//   console.log(amount, title);\r\n  return (\r\n    <div>\r\n      <Doughnut data={data}  options={options}/>\r\n    </div>\r\n  );\r\n}\r\nexport default ChartElement;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport ChartElement from \"./ChartElement\";\r\n// import InputNumber from \"react-input-just-numbers\";\r\n\r\nfunction ExpenseForm() {\r\n  const [lists, setList] = useState([{ id: \"\", title: \"\", amount: null }]);\r\n  // const [amounts, setAmounts] = useState([]);\r\n  const [total, setTotal] = useState(null);\r\n  const [chartTitle, setChartTitle] = useState([]);\r\n  const [chartAmount, setChartAmount] = useState([]);\r\n  const inputRef = React.createRef()\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const title = e.target.elements.Title.value.trim();\r\n    const amount = e.target.elements.Amount.value.slice(1);\r\n    e.target.reset();\r\n    setList([...lists, { id: lists.length, title, amount }]);\r\n    setTotal(total + Number(amount));\r\n    setChartTitle([...chartTitle, title]);\r\n    setChartAmount([...chartAmount, amount]);\r\n    if(total===null){\r\n    document.querySelector(\".charts\").classList.remove('hidden')\r\n    document.querySelector(\".hidden\").classList.remove('hidden')\r\n  }\r\n  inputRef.current.focus();\r\n \r\n    //NumberFormat.value = ''\r\n  };\r\n  useEffect(()=>{\r\n    inputRef.current.focus();\r\n  })\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit} className=\"addItems\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"Title\"\r\n          ref={inputRef}\r\n          placeholder=\"Title\"\r\n          style={{ textTransform: \"capitalize\" }}\r\n          required=\"Required\"\r\n        ></input>\r\n        <div>\r\n          <NumberFormat\r\n            thousandSeparator={false}\r\n            thousandsGroupStyle=\"lakh\"\r\n            prefix={\"â‚¹\"}\r\n            name=\"Amount\"\r\n            placeholder=\"Amount...\"\r\n            value=\"\"\r\n            required=\"Required\"\r\n          />\r\n          <button type=\"submit\">Add Items</button>\r\n        </div>\r\n      </form>\r\n\r\n      <table className=\"hidden\">\r\n        <tbody>\r\n          <tr>\r\n            <th>Title</th>\r\n            <th>Amount</th>\r\n          </tr>\r\n          {lists.map((list, index) => {\r\n            return (\r\n              <tr style={{ listStyleType: \"none\" }} key={index}>\r\n                <td style={{ textTransform: \"capitalize\" }}> {list.title} </td>\r\n                <td> {list.amount}</td>\r\n              </tr>\r\n            );\r\n          })}\r\n          <tr>\r\n            <td className=\"totalLine \">Total</td>\r\n            <td className=\"totalLine \">{total}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n          <div className=\"charts hidden\">\r\n      {/* {console.log(lists[count].title)} */}\r\n      <ChartElement amount={chartAmount} title={chartTitle} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default ExpenseForm;\r\n","import React from \"react\";\r\n// import Typical from 'react-typical'\r\nimport ReactTypingEffect from \"react-typing-effect\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\n\r\nconst a = [\r\n  \"Renters\",\r\n  \"Tax\",\r\n  \"Life insurance\",\r\n  \"Electricity\",\r\n  \"Water\",\r\n  \"Groceries\",\r\n  \"Gasoline\",\r\n  \"Telephone bill\",\r\n  \"Travel expenses\",\r\n  \"Meals \",\r\n];\r\nfunction Calculator() {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1 className=\"mainLogo\">Expense tracker</h1>\r\n      </div>\r\n      <div className=\"mainHeader\">\r\n        <h1>\r\n          Expenses\r\n          <div className=\"expenseTitle\">\r\n            <ReactTypingEffect\r\n              text={a}\r\n              speed={200}\r\n              typingDelay={200}\r\n              eraseDelay={200}\r\n            />\r\n          </div>\r\n        </h1>\r\n      </div>\r\n      <ExpenseForm />\r\n    </div>\r\n  );\r\n}\r\nexport default Calculator;\r\n","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}